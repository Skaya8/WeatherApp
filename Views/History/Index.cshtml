@model List<WeatherApp.Models.WeatherSearchResult>

@{
    ViewData["Title"] = "Weather Search History";
    var conditions = ViewBag.Conditions as List<string> ?? new List<string>();
    var allConditions = ViewBag.AllConditions as string[] ?? new string[0];
    var conditionIconMapping = ViewBag.ConditionIconMapping as Dictionary<string, string> ?? new Dictionary<string, string>();
    var weatherConditionService = ViewBag.WeatherConditionService as WeatherApp.Services.Interfaces.IWeatherConditionService;
}

<div class="container mt-3">
    <h2>Weather Search History</h2>
    <form method="get" class="mb-3" id="filterForm" autocomplete="off">
        <div class="row g-2 align-items-end">
            <div class="col-md-3">
                <label for="city" class="form-label">City</label>
                <select name="city" id="city" class="form-select" autocomplete="off">
@{
    var citySelected = string.IsNullOrEmpty(ViewBag.City as string);
}
                    @if (citySelected)
                    {
                        <option value="" selected>All Cities</option>
                    }
                    else
                    {
                        <option value="">All Cities</option>
                    }
                    @foreach (var c in (List<string>)ViewBag.Cities)
                    {
                        if (ViewBag.City == (string)c)
                        {
                            <option value="@c" selected>@c</option>
                        }
                        else
                        {
                            <option value="@c">@c</option>
                        }
                    }
                </select>
            </div>
            <div class="col-md-3">
                <label for="condition" class="form-label">Condition</label>
                <select name="condition" id="condition" class="form-select" autocomplete="off">
@{
    var condSelected = string.IsNullOrEmpty(ViewBag.Condition as string);
}
                    @if (condSelected)
                    {
                        <option value="" selected>All Conditions</option>
                    }
                    else
                    {
                        <option value="">All Conditions</option>
                    }
                    @foreach (var cond in conditions)
                    {
                        if (ViewBag.Condition == (string)cond)
                        {
                            <option value="@cond" selected>@cond</option>
                        }
                        else
                        {
                            <option value="@cond">@cond</option>
                        }
                    }
                </select>
            </div>
            <div class="col-md-2 d-flex align-items-end">
                <button type="submit" class="btn btn-primary">Filter</button>
                <a href="/History/Index" class="btn btn-primary ms-2">Reset</a>
            </div>
        </div>
    </form>
    <form id="editForm">
    <table class="table table-hover table-striped align-middle" id="historyTable">
        <thead class="table-dark sticky-top">
            <tr>
                <th>City</th>
                <th>Condition</th>
                <th>Current Temp</th>
                <th>Temp (Min)</th>
                <th>Temp (Max)</th>
                <th>Humidity</th>
                <th>Wind</th>
                <th>Date</th>
                <th>Change Log</th>
            </tr>
        </thead>
        <tbody>
        @for (int i = 0; i < Model.Count; i++)
        {
            <tr data-id="@Model[i].Id">
                <td>@Model[i].City</td>
                <td class="condition-cell">
                    <div class="d-flex align-items-center">
                        @{
                            var iconUrl = weatherConditionService?.GetIconForCondition(Model[i].Condition);
                        }
                        @if (!string.IsNullOrEmpty(iconUrl))
                        {
                            <img src="@iconUrl" 
                                 alt="@Model[i].Condition" 
                                 class="weather-icon me-2" 
                                 style="width: 32px; height: 32px;">
                        }
                        else
                        {
                            <div class="weather-icon me-2" style="width: 32px; height: 32px; background: #f0f0f0; border-radius: 4px; display: flex; align-items: center; justify-content: center; font-size: 12px; color: #666;">
                                ?
                            </div>
                        }
                        <select class="form-select condition-select" data-field="Condition">
                            @foreach (var cond in allConditions)
                            {
                                if (Model[i].Condition == cond)
                                {
                                    <option value="@cond" selected>@cond</option>
                                }
                                else
                                {
                                    <option value="@cond">@cond</option>
                                }
                            }
                        </select>
                    </div>
                </td>
                <td><span class="editable" data-field="CurrentTemp" contenteditable="true">@Model[i].CurrentTemp</span>&deg;C</td>
                <td><span class="editable" data-field="TempMin" contenteditable="true">@Model[i].TempMin</span>&deg;C</td>
                <td><span class="editable" data-field="TempMax" contenteditable="true">@Model[i].TempMax</span>&deg;C</td>
                <td><span class="editable" data-field="Humidity" contenteditable="true">@Model[i].Humidity</span>%</td>
                <td><span class="editable" data-field="WindSpeed" contenteditable="true">@Model[i].WindSpeed</span> m/s, <span class="editable" data-field="WindDeg" contenteditable="true">@Model[i].WindDeg</span>&deg;</td>
                <td>@Model[i].SearchDate.ToString("M/d/yyyy")</td>
                <td>
                    <button type="button" class="custom-view-btn view-log" data-id="@Model[i].Id" title="View Log">View</button>
                </td>
            </tr>
        }
        </tbody>
    </table>
    </form>
    <div class="d-flex flex-column align-items-center mt-4 mb-3">
        <button type="button" id="saveChanges" class="custom-save-btn">Save Changes</button>
        <div id="saveMsg" class="mt-2"></div>
    </div>
    <nav aria-label="Page navigation">
        <ul class="pagination">
            @for (int i = 1; i <= (int)ViewBag.TotalPages; i++)
            {
                <li class="page-item @(i == (int)ViewBag.Page ? "active" : "")">
                    <a class="page-link" href="@Url.Action("Index", new { city = ViewBag.City, fromDate = ViewBag.FromDate, toDate = ViewBag.ToDate, page = i })">@i</a>
                </li>
            }
        </ul>
    </nav>
</div>

<div class="modal fade" id="changeLogModal" tabindex="-1" aria-labelledby="changeLogModalLabel" aria-hidden="true">
  <div class="modal-dialog">
    <div class="modal-content">
      <div class="modal-header">
        <h5 class="modal-title" id="changeLogModalLabel">Change Log</h5>
        <button type="button" class="btn-close" data-bs-dismiss="modal" aria-label="Close"></button>
      </div>
      <div class="modal-body" id="changeLogContent">
      </div>
    </div>
  </div>
</div>

@section Scripts {
<script src="https://cdnjs.cloudflare.com/ajax/libs/lottie-web/5.10.2/lottie.min.js"></script>
<script src="https://cdn.jsdelivr.net/npm/bootstrap-icons@1.11.1/font/bootstrap-icons.js"></script>
<script>
    var changedRows = {};
    // Map condition to icon URL (OpenWeatherMap style) - dynamically generated from server
    var conditionToIcon = @Html.Raw(Json.Serialize(conditionIconMapping));
    $(document).ready(function () {
        // Track changes for contenteditable and input/select fields
        $("#historyTable").on("input change", ".editable, .editable-input, .editable-select, .condition-select", function () {
            var row = $(this).closest("tr");
            var id = row.data("id");
            var currentCondition = row.find('select[data-field="Condition"]').val();
            
            if (!changedRows[id]) {
                changedRows[id] = {
                    Id: id,
                    Humidity: parseInt(row.find('[data-field="Humidity"]').text(), 10),
                    TempMin: parseFloat(row.find('[data-field="TempMin"]').text()),
                    TempMax: parseFloat(row.find('[data-field="TempMax"]').text()),
                    WindSpeed: parseFloat(row.find('[data-field="WindSpeed"]').text()),
                    WindDeg: parseInt(row.find('[data-field="WindDeg"]').text(), 10),
                    CurrentTemp: parseFloat(row.find('[data-field="CurrentTemp"]').text()),
                    Condition: currentCondition
                };
            } else {
                if ($(this).hasClass("editable-input")) {
                    changedRows[id][$(this).data("field")] = parseFloat($(this).val());
                } else if ($(this).hasClass("editable-select") || $(this).hasClass("condition-select")) {
                    changedRows[id][$(this).data("field")] = $(this).val();
                } else {
                    var field = $(this).data("field");
                    var value = $(this).text();
                    if (field === "Humidity" || field === "WindDeg") {
                        changedRows[id][field] = parseInt(value, 10);
                    } else if (field === "TempMin" || field === "TempMax" || field === "WindSpeed" || field === "CurrentTemp") {
                        changedRows[id][field] = parseFloat(value);
                    } else {
                        changedRows[id][field] = value;
                    }
                }
                // Update condition only if it's not the field being changed
                if ($(this).data("field") !== "Condition") {
                    changedRows[id].Condition = currentCondition;
                }
            }
            
            // Live icon update if condition changed
            if ($(this).data("field") === "Condition") {
                var cond = $(this).val();
                var iconUrl = conditionToIcon[cond] || "";
                var iconImg = row.find('.weather-icon');
                if (iconUrl) {
                    iconImg.attr('src', iconUrl);
                    iconImg.show();
                } else {
                    iconImg.hide();
                }
            }
        });
        // Save changes
        $('#saveChanges').click(function () {
            var changes = Object.values(changedRows);
            if (changes.length === 0) {
                $('#saveMsg').text('No changes to save.').removeClass().addClass('alert alert-info');
                return;
            }
            $.ajax({
                url: '/History/SaveChanges',
                type: 'POST',
                contentType: 'application/json',
                data: JSON.stringify(changes),
                success: function (response) {
                    $('#saveMsg').text(response.message).removeClass().addClass('alert alert-success');
                    changedRows = {};
                },
                error: function () {
                    $('#saveMsg').text('Failed to save changes.').removeClass().addClass('alert alert-danger');
                }
            });
        });
        // View change log
        $(document).on('click', '.view-log', function () {
            var id = $(this).data('id');
            $.get('/History/GetChangeLog', { id: id }, function (data) {
                var html = '<table class="table table-bordered"><thead><tr><th>Date</th><th>Field</th><th>Old Value</th><th>New Value</th></tr></thead><tbody>';
                data.forEach(function (log) {
                    html += `<tr>
                        <td>${log.changeDate}</td>
                        <td>${log.changeType}</td>
                        <td>${log.oldValue}</td>
                        <td>${log.newValue}</td>
                    </tr>`;
                });
                html += '</tbody></table>';
                $('#changeLogContent').html(html);
                var modal = new bootstrap.Modal(document.getElementById('changeLogModal'));
                modal.show();
            });
        });
        // Lottie animations for each row
        @for (int i = 0; i < Model.Count; i++)
        {
            <text>
            lottie.loadAnimation({
                container: document.getElementById('lottie-tempmin-@Model[i].Id'),
                renderer: 'svg',
                loop: true,
                autoplay: true,
                path: '/lottie/thermometer-cold.json'
            });
            lottie.loadAnimation({
                container: document.getElementById('lottie-tempmax-@Model[i].Id'),
                renderer: 'svg',
                loop: true,
                autoplay: true,
                path: '/lottie/thermometer-hot.json'
            });
            lottie.loadAnimation({
                container: document.getElementById('lottie-currenttemp-@Model[i].Id'),
                renderer: 'svg',
                loop: true,
                autoplay: true,
                path: '/lottie/temperature-gauge.json'
            });
            lottie.loadAnimation({
                container: document.getElementById('lottie-wind-@Model[i].Id'),
                renderer: 'svg',
                loop: true,
                autoplay: true,
                path: '/lottie/wind.json'
            });
            lottie.loadAnimation({
                container: document.getElementById('lottie-humidity-@Model[i].Id'),
                renderer: 'svg',
                loop: true,
                autoplay: true,
                path: '/lottie/humidity.json'
            });
            </text>
        }
    });
</script>
} 